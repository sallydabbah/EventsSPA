{"id":"node_modules/jayson/lib/method.js","dependencies":[{"name":"C:\\Users\\ameerzu\\Desktop\\BestWishesTsofen\\EventsSPA\\package.json","includedInParent":true,"mtime":1558854526224},{"name":"C:\\Users\\ameerzu\\Desktop\\BestWishesTsofen\\EventsSPA\\node_modules\\jayson\\package.json","includedInParent":true,"mtime":1558854523711},{"name":"./","loc":{"line":1,"column":21},"parent":"C:\\Users\\ameerzu\\Desktop\\BestWishesTsofen\\EventsSPA\\node_modules\\jayson\\lib\\method.js","resolved":"C:\\Users\\ameerzu\\Desktop\\BestWishesTsofen\\EventsSPA\\node_modules\\jayson\\lib\\index.js"},{"name":"./utils","loc":{"line":2,"column":20},"parent":"C:\\Users\\ameerzu\\Desktop\\BestWishesTsofen\\EventsSPA\\node_modules\\jayson\\lib\\method.js","resolved":"C:\\Users\\ameerzu\\Desktop\\BestWishesTsofen\\EventsSPA\\node_modules\\jayson\\lib\\utils.js"},{"name":"lodash","loc":{"line":3,"column":16},"parent":"C:\\Users\\ameerzu\\Desktop\\BestWishesTsofen\\EventsSPA\\node_modules\\jayson\\lib\\method.js","resolved":"C:\\Users\\ameerzu\\Desktop\\BestWishesTsofen\\EventsSPA\\node_modules\\lodash\\lodash.js"}],"generated":{"js":"var jayson = require('./');\nvar utils = require('./utils');\nvar _ = require('lodash');\n\n/**\n * @summary Constructor for a Jayson Method\n * @class Method\n * @param {Function} [handler] - Function to set as handler\n * @param {Object} [options] \n * @param {Function} [options.handler] - Same as separate handler\n * @param {Boolean} [options.collect=true] - Params to the handler are collected in one object\n * @param {Array|Object} [options.params] - Defines params that the handler accepts\n */\nvar Method = function(handler, options) {\n\n  if(!(this instanceof Method)) {\n    return new Method(handler, options);\n  }\n\n  // only got passed options\n  if(_.isPlainObject(handler)) {\n    options = handler;\n    handler = null;\n  }\n\n  var defaults = {\n    collect: true\n  };\n\n  options = options || {};\n\n  this.options = utils.merge(defaults, options);\n  this.handler = handler || options.handler;\n};\n\nmodule.exports = Method;\n\n/**\n * @summary Returns the handler function associated with this method\n * @return {Function}\n */\nMethod.prototype.getHandler = function() {\n  return this.handler;\n};\n\n/**\n * @summary Sets the handler function associated with this method\n * @param {Function} handler\n */\nMethod.prototype.setHandler = function(handler) {\n  this.handler = handler;\n};\n\n/**\n * @summary Prepare parameters for the method handler\n * @private\n */\nMethod.prototype._getHandlerParams = function(params) {\n  var options = this.options;\n  var handler = this.getHandler();\n\n  var isObjectParams = !_.isArray(params) && _.isObject(params) && params;\n  var isArrayParams = _.isArray(params);\n\n  if(options.collect) {\n    // collect parameters in one argument to handler\n\n    switch(true) {\n\n      // handler always gets an array\n      case options.params === Array:\n        return isArrayParams ? params : _.toArray(params);\n\n      // handler always gets an object\n      case options.params === Object:\n        return isObjectParams ? params : _.toPlainObject(params);\n\n      // handler gets a list of defined properties that should always be set\n      case _.isArray(options.params):\n        var undefinedParams = _.reduce(options.params, function(undefinedParams, key) {\n          undefinedParams[key] = undefined;\n          return undefinedParams;\n        }, {});\n        return _.extend(undefinedParams, _.pick(params, _.keys(params)));\n\n      // handler gets a map of defined properties and their default values\n      case _.isPlainObject(options.params):\n        return _.extend({}, options.params, _.pick(params, _.keys(params)));\n\n      // give params as is\n      default:\n        return params;\n    \n    }\n\n  } else {\n    // let the arguments pass to the handler as given\n\n    if(isObjectParams) {\n      // named parameters passed, take all parameters for handler except last (the callback)\n      return _.initial(utils.getParameterNames(handler)).map(function(name) {\n        return params[name];\n      });\n    }\n\n    // regular parameters array passed\n    return params;\n  }\n};\n\n/**\n * @summary Executes this method in the context of a server\n * @param {Server} server\n * @param {Array|Object} requestParams\n * @param {Function} callback\n */\nMethod.prototype.execute = function(server, requestParams, callback) {\n  var options = this.options;\n  var handler = this.getHandler();\n  var params = this._getHandlerParams(requestParams);\n\n  if(options.collect) {\n    return handler.call(server, params, callback);\n  }\n\n  // Params is optional according to the JSON-RPC 2.0 spec so if it doesnt\n  // exist just create an empty array.\n  if (!params) {\n    params = [];\n  }\n\n  // compare without the callback\n  if(handler.length !== (params.length + 1)) {\n    callback(server.error(jayson.Server.errors.INVALID_PARAMS));\n    return;\n  }\n\n  return handler.apply(server, _.flatten([params, callback]));\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/jayson/lib/method.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/jayson/lib/method.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}}],"sources":{"node_modules/jayson/lib/method.js":"var jayson = require('./');\nvar utils = require('./utils');\nvar _ = require('lodash');\n\n/**\n * @summary Constructor for a Jayson Method\n * @class Method\n * @param {Function} [handler] - Function to set as handler\n * @param {Object} [options] \n * @param {Function} [options.handler] - Same as separate handler\n * @param {Boolean} [options.collect=true] - Params to the handler are collected in one object\n * @param {Array|Object} [options.params] - Defines params that the handler accepts\n */\nvar Method = function(handler, options) {\n\n  if(!(this instanceof Method)) {\n    return new Method(handler, options);\n  }\n\n  // only got passed options\n  if(_.isPlainObject(handler)) {\n    options = handler;\n    handler = null;\n  }\n\n  var defaults = {\n    collect: true\n  };\n\n  options = options || {};\n\n  this.options = utils.merge(defaults, options);\n  this.handler = handler || options.handler;\n};\n\nmodule.exports = Method;\n\n/**\n * @summary Returns the handler function associated with this method\n * @return {Function}\n */\nMethod.prototype.getHandler = function() {\n  return this.handler;\n};\n\n/**\n * @summary Sets the handler function associated with this method\n * @param {Function} handler\n */\nMethod.prototype.setHandler = function(handler) {\n  this.handler = handler;\n};\n\n/**\n * @summary Prepare parameters for the method handler\n * @private\n */\nMethod.prototype._getHandlerParams = function(params) {\n  var options = this.options;\n  var handler = this.getHandler();\n\n  var isObjectParams = !_.isArray(params) && _.isObject(params) && params;\n  var isArrayParams = _.isArray(params);\n\n  if(options.collect) {\n    // collect parameters in one argument to handler\n\n    switch(true) {\n\n      // handler always gets an array\n      case options.params === Array:\n        return isArrayParams ? params : _.toArray(params);\n\n      // handler always gets an object\n      case options.params === Object:\n        return isObjectParams ? params : _.toPlainObject(params);\n\n      // handler gets a list of defined properties that should always be set\n      case _.isArray(options.params):\n        var undefinedParams = _.reduce(options.params, function(undefinedParams, key) {\n          undefinedParams[key] = undefined;\n          return undefinedParams;\n        }, {});\n        return _.extend(undefinedParams, _.pick(params, _.keys(params)));\n\n      // handler gets a map of defined properties and their default values\n      case _.isPlainObject(options.params):\n        return _.extend({}, options.params, _.pick(params, _.keys(params)));\n\n      // give params as is\n      default:\n        return params;\n    \n    }\n\n  } else {\n    // let the arguments pass to the handler as given\n\n    if(isObjectParams) {\n      // named parameters passed, take all parameters for handler except last (the callback)\n      return _.initial(utils.getParameterNames(handler)).map(function(name) {\n        return params[name];\n      });\n    }\n\n    // regular parameters array passed\n    return params;\n  }\n};\n\n/**\n * @summary Executes this method in the context of a server\n * @param {Server} server\n * @param {Array|Object} requestParams\n * @param {Function} callback\n */\nMethod.prototype.execute = function(server, requestParams, callback) {\n  var options = this.options;\n  var handler = this.getHandler();\n  var params = this._getHandlerParams(requestParams);\n\n  if(options.collect) {\n    return handler.call(server, params, callback);\n  }\n\n  // Params is optional according to the JSON-RPC 2.0 spec so if it doesnt\n  // exist just create an empty array.\n  if (!params) {\n    params = [];\n  }\n\n  // compare without the callback\n  if(handler.length !== (params.length + 1)) {\n    callback(server.error(jayson.Server.errors.INVALID_PARAMS));\n    return;\n  }\n\n  return handler.apply(server, _.flatten([params, callback]));\n};\n"},"lineCount":140}},"error":null,"hash":"fc959decc0590a7e6b7bad316ee98d4d","cacheData":{"env":{}}}